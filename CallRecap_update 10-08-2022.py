# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Callcenter.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import datetime
import os
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QSize
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QFileDialog, QTableWidgetItem
import pandas as pd
import xlsxwriter

##Gestion de l'icon de la barre des taches
basedir = os.path.dirname(__file__)
try:
    from ctypes import windll  # Only exists on Windows.
    myappid = 'HallTechAfrica.CallRecap.Smart.1.5'
    windll.shell32.SetCurrentProcessExplicitAppUserModelID(myappid)
except ImportError:
    pass
##Fin de la gestion de l'icon de la barre des taches
class CallCenter(object):
    mois, Num, dateDebut, dateFin = 0, 0, 0, 0
    ListTotal, Listexport = [], [['AppelTotal', 'AppelRepondu', 'AppelRefuse', 'MessageVocal','Date de Debut','Date de Fin']]
    month=["janvier","FÃ©vrier","Mars","Avril","Juin","Juillet","Aout","Septembre","Octobre","Novembre","Decembre"]
    janvier={
        "total":0,"repondu":0,"pasRepondu":0, "messageVocal":0
    }
    fevrier = {
        "total": 0, "repondu": 0, "pasRepondu": 0, "messageVocal": 0,'nom':'fevrier'
    }
    mars = {
        "total": 0, "repondu": 0, "pasRepondu": 0, "messageVocal": 0,'nom':'Mars'
    }
    avril = {
        "total": 0, "repondu": 0, "pasRepondu": 0, "messageVocal": 0,'nom':'Avril'
    }
    mai = {
        "total": 0, "repondu": 0, "pasRepondu": 0, "messageVocal": 0,'nom':'Mai'
    }
    juin = {
        "total": 0, "repondu": 0, "pasRepondu": 0, "messageVocal": 0
    }
    juillet = {
        "total": 0, "repondu": 0, "pasRepondu": 0, "messageVocal": 0
    }
    aout = {
        "total": 0, "repondu": 0, "pasRepondu": 0, "messageVocal": 0
    }
    septembre = {
        "total": 0, "repondu": 0, "pasRepondu": 0, "messageVocal": 0
    }
    octobre = {
        "total": 0, "repondu": 0, "pasRepondu": 0, "messageVocal": 0
    }
    novembre = {
        "total": 0, "repondu": 0, "pasRepondu": 0, "messageVocal": 0
    }
    decembre = {
        "total": 0, "repondu": 0, "pasRepondu": 0, "messageVocal": 0
    }
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(799, 571)
        MainWindow.setMaximumSize(QtCore.QSize(799, 571))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        MainWindow.setFont(font)
        MainWindow.setFont(font)
        #Debut change icon
        # icon = QIcon()
        # icon.addFile(u"process.ico", QSize(), QIcon.Active, QIcon.On)
        # MainWindow.setWindowIcon(icon)
        #Fin change icon
        MainWindow.setStyleSheet("background-color: rgb(247, 249, 249)")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.TableWidgetRecapAppel = QtWidgets.QTableWidget(self.centralwidget)
        self.TableWidgetRecapAppel.setGeometry(QtCore.QRect(130, 130, 551, 421))
        self.TableWidgetRecapAppel.setObjectName("TableWidgetRecapAppel")
        self.TableWidgetRecapAppel.setColumnCount(0)
        self.TableWidgetRecapAppel.setRowCount(0)
        self.FrameAppelRepondu = QtWidgets.QFrame(self.centralwidget)
        self.FrameAppelRepondu.setGeometry(QtCore.QRect(220, 60, 171, 61))
        self.FrameAppelRepondu.setStyleSheet("background-color: rgb(46, 204, 113);\n"
"color:rgb(255,255,255)")
        self.FrameAppelRepondu.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.FrameAppelRepondu.setFrameShadow(QtWidgets.QFrame.Raised)
        self.FrameAppelRepondu.setObjectName("FrameAppelRepondu")
        self.LabelBanierAppelRepondu = QtWidgets.QLabel(self.FrameAppelRepondu)
        self.LabelBanierAppelRepondu.setGeometry(QtCore.QRect(0, 30, 171, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.LabelBanierAppelRepondu.setFont(font)
        self.LabelBanierAppelRepondu.setAlignment(QtCore.Qt.AlignCenter)
        self.LabelBanierAppelRepondu.setObjectName("LabelBanierAppelRepondu")
        self.LabelAppelRepondu = QtWidgets.QLabel(self.FrameAppelRepondu)
        self.LabelAppelRepondu.setGeometry(QtCore.QRect(10, 0, 151, 31))
        font = QtGui.QFont()
        font.setPointSize(19)
        font.setBold(True)
        font.setWeight(75)
        self.LabelAppelRepondu.setFont(font)
        self.LabelAppelRepondu.setAlignment(QtCore.Qt.AlignCenter)
        self.LabelAppelRepondu.setObjectName("LabelAppelRepondu")
        self.FrameAppelNonRepondu = QtWidgets.QFrame(self.centralwidget)
        self.FrameAppelNonRepondu.setGeometry(QtCore.QRect(410, 60, 171, 61))
        self.FrameAppelNonRepondu.setStyleSheet("background-color: rgb(231, 76, 60);\n"
"color:rgb(255,255,255)")
        self.FrameAppelNonRepondu.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.FrameAppelNonRepondu.setFrameShadow(QtWidgets.QFrame.Raised)
        self.FrameAppelNonRepondu.setObjectName("FrameAppelNonRepondu")
        self.LabelAppelRefuse = QtWidgets.QLabel(self.FrameAppelNonRepondu)
        self.LabelAppelRefuse.setGeometry(QtCore.QRect(10, 0, 151, 31))
        font = QtGui.QFont()
        font.setPointSize(19)
        font.setBold(True)
        font.setWeight(75)
        self.LabelAppelRefuse.setFont(font)
        self.LabelAppelRefuse.setAlignment(QtCore.Qt.AlignCenter)
        self.LabelAppelRefuse.setObjectName("LabelAppelRefuse")
        self.LabelBanierAppelNonRepondu = QtWidgets.QLabel(self.FrameAppelNonRepondu)
        self.LabelBanierAppelNonRepondu.setGeometry(QtCore.QRect(0, 30, 171, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.LabelBanierAppelNonRepondu.setFont(font)
        self.LabelBanierAppelNonRepondu.setAlignment(QtCore.Qt.AlignCenter)
        self.LabelBanierAppelNonRepondu.setObjectName("LabelBanierAppelNonRepondu")
        self.FrameAppelTotal = QtWidgets.QFrame(self.centralwidget)
        self.FrameAppelTotal.setGeometry(QtCore.QRect(30, 60, 171, 61))
        self.FrameAppelTotal.setStyleSheet("background-color: rgb(52, 152, 219);\n"
"color:rgb(255,255,255)")
        self.FrameAppelTotal.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.FrameAppelTotal.setFrameShadow(QtWidgets.QFrame.Raised)
        self.FrameAppelTotal.setObjectName("FrameAppelTotal")
        self.LabelBanierAppelTotal = QtWidgets.QLabel(self.FrameAppelTotal)
        self.LabelBanierAppelTotal.setGeometry(QtCore.QRect(0, 30, 171, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.LabelBanierAppelTotal.setFont(font)
        self.LabelBanierAppelTotal.setAlignment(QtCore.Qt.AlignCenter)
        self.LabelBanierAppelTotal.setObjectName("LabelBanierAppelTotal")
        self.LabelAppelTotal = QtWidgets.QLabel(self.FrameAppelTotal)
        self.LabelAppelTotal.setGeometry(QtCore.QRect(10, 0, 151, 31))
        font = QtGui.QFont()
        font.setPointSize(19)
        font.setBold(True)
        font.setWeight(75)
        self.LabelAppelTotal.setFont(font)
        self.LabelAppelTotal.setAlignment(QtCore.Qt.AlignCenter)
        self.LabelAppelTotal.setObjectName("LabelAppelTotal")
        self.FrameMessageVocal = QtWidgets.QFrame(self.centralwidget)
        self.FrameMessageVocal.setGeometry(QtCore.QRect(600, 60, 171, 61))
        self.FrameMessageVocal.setStyleSheet("background-color: rgb(230, 126, 34);\n"
"color:rgb(255,255,255)")
        self.FrameMessageVocal.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.FrameMessageVocal.setFrameShadow(QtWidgets.QFrame.Raised)
        self.FrameMessageVocal.setObjectName("FrameMessageVocal")
        self.LabelBanierMessageVocal = QtWidgets.QLabel(self.FrameMessageVocal)
        self.LabelBanierMessageVocal.setGeometry(QtCore.QRect(0, 30, 171, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.LabelBanierMessageVocal.setFont(font)
        self.LabelBanierMessageVocal.setAlignment(QtCore.Qt.AlignCenter)
        self.LabelBanierMessageVocal.setObjectName("LabelBanierMessageVocal")
        self.LabelMessageVocal = QtWidgets.QLabel(self.FrameMessageVocal)
        self.LabelMessageVocal.setGeometry(QtCore.QRect(10, 0, 151, 31))
        font = QtGui.QFont()
        font.setPointSize(19)
        font.setBold(True)
        font.setWeight(75)
        self.LabelMessageVocal.setFont(font)
        self.LabelMessageVocal.setAlignment(QtCore.Qt.AlignCenter)
        self.LabelMessageVocal.setObjectName("LabelMessageVocal")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(30, 20, 632, 25))
        self.widget.setObjectName("widget")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.pushButton = QtWidgets.QPushButton(self.widget)
        self.pushButton.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 10pt \"MS Shell Dlg 2\";\n"
"background-color: rgb(52, 152, 219);\n"
"borser-style:outset;\n"
"border-width:2px;\n"
"border-radius:5px;\n"
"border-color:#fff\n;"
"padding:5px\n"
"")
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_3.addWidget(self.pushButton)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.LabelDateEdit = QtWidgets.QLabel(self.widget)
        self.LabelDateEdit.setObjectName("LabelDateEdit")
        self.horizontalLayout.addWidget(self.LabelDateEdit)
        self.EditDate = QtWidgets.QDateEdit(self.widget)
        self.EditDate.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(52, 152, 219);\n"
"borser-style:outset;\n"
"border-width:2px;\n"
"border-radius:5px;\n"
"border-color:#fff")
        self.EditDate.setCalendarPopup(True)
        self.EditDate.setDate(QtCore.QDate(2022, 1, 1))
        self.EditDate.setObjectName("EditDate")
        self.horizontalLayout.addWidget(self.EditDate)
        self.horizontalLayout_3.addLayout(self.horizontalLayout)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem1)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.labelDateEdit_2 = QtWidgets.QLabel(self.widget)
        self.labelDateEdit_2.setObjectName("labelDateEdit_2")
        self.horizontalLayout_2.addWidget(self.labelDateEdit_2)
        self.EditDate_2 = QtWidgets.QDateEdit(self.widget)
        self.EditDate_2.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(52, 152, 219);\n"
"borser-style:outset;\n"
"border-width:2px;\n"
"border-radius:5px;\n"
"border-color:#fff")
        self.EditDate_2.setCalendarPopup(True)
        self.EditDate_2.setDate(QtCore.QDate(2022, 1, 1))
        self.EditDate_2.setObjectName("EditDate_2")
        self.horizontalLayout_2.addWidget(self.EditDate_2)
        self.horizontalLayout_3.addLayout(self.horizontalLayout_2)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem2)
        self.BoutonSauvegarder = QtWidgets.QPushButton(self.widget)
        self.BoutonSauvegarder.setObjectName("BoutonSauvegarder")
        self.horizontalLayout_3.addWidget(self.BoutonSauvegarder)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.action_2 = QtWidgets.QAction(MainWindow)
        self.action_2.setObjectName("action_2")
        self.actionRapport_Mensuelle = QtWidgets.QAction(MainWindow)
        self.actionRapport_Mensuelle.setObjectName("actionRapport_Mensuelle")
        self.actionRechercher_une_Date = QtWidgets.QAction(MainWindow)
        self.actionRechercher_une_Date.setObjectName("actionRechercher_une_Date")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "CallRecap"))#nom de la fenetre
        self.LabelBanierAppelRepondu.setText(_translate("MainWindow", " Appel Repondu"))
        self.LabelAppelRepondu.setText(_translate("MainWindow", "0"))
        self.LabelAppelRefuse.setText(_translate("MainWindow", "0"))
        self.LabelBanierAppelNonRepondu.setText(_translate("MainWindow", " Appel non Repondu"))
        self.LabelBanierAppelTotal.setText(_translate("MainWindow", "Total Appel"))
        self.LabelAppelTotal.setText(_translate("MainWindow", "0"))
        self.LabelBanierMessageVocal.setText(_translate("MainWindow", " Message Vocal"))
        self.LabelMessageVocal.setText(_translate("MainWindow", "0"))
        self.pushButton.setText(_translate("MainWindow", "Choisir Fichier"))
        self.LabelDateEdit.setText(_translate("MainWindow", "Date de Debut"))
        self.EditDate.setToolTip(_translate("MainWindow", "<html><head/><body><p align=\"center\"><br/></p></body></html>"))
        self.labelDateEdit_2.setText(_translate("MainWindow", "Date de Fin"))
        self.EditDate_2.setToolTip(_translate("MainWindow", "<html><head/><body><p align=\"center\"><br/></p></body></html>"))
        self.BoutonSauvegarder.setText(_translate("MainWindow", "Sauvegarder en Excel"))
        self.BoutonSauvegarder.setStyleSheet("color: rgb(255, 255, 255);\n"
                                      "font: 10pt \"MS Shell Dlg 2\";\n"
                                      "background-color: rgb(52, 152, 219);\n"
                                      "borser-style:outset;\n"
                                      "border-width:2px;\n"
                                      "border-radius:5px;\n"
                                      "border-color:#fff;\n"
                                      "padding:5px\n"
                                      "")
        self.action_2.setText(_translate("MainWindow", "Choisir Fichier"))
        self.actionRapport_Mensuelle.setText(_translate("MainWindow", "Rapport Mensuelle"))
        self.actionRechercher_une_Date.setText(_translate("MainWindow", "Rechercher une Date"))
#import call-phone_rc

#Debut de la logique
        #ici ces les evenements
        self.pushButton.clicked.connect(self.clicker) #le clique sur le bouton choisir fichier
        self.EditDate_2.dateChanged.connect(self.date)# quand la date du 2ieme EditDate est changer
        self.BoutonSauvegarder.clicked.connect(self.save)#le clique sur le bouton exporter


    #ici c'est les action
    def clicker(self):#les actions du bouton choisir fichier
        try:
            Fichier = QFileDialog.getOpenFileName(None, 'Choisir Fichier', 'C:', 'CSV (*.csv);; Excel(*.xlsx')#ouvrir fenÃªtre de choix
            self.all_data = pd.read_csv(Fichier[0])
            NumRows = len(self.all_data.index)
            CallCenter.Num = NumRows
            self.TableWidgetRecapAppel.setColumnCount(len(self.all_data.columns))
            self.TableWidgetRecapAppel.setRowCount(NumRows)
            self.TableWidgetRecapAppel.setHorizontalHeaderLabels(self.all_data.columns)

            for i in range(NumRows):
                for j in range(len(self.all_data.columns)):
                    self.TableWidgetRecapAppel.setItem(i, j, QTableWidgetItem(str(self.all_data.iat[i, j])))

            self.TableWidgetRecapAppel.resizeColumnsToContents()
            self.TableWidgetRecapAppel.resizeRowsToContents()
            messageVocal, pasRepondu, reponse, total,datemoisd,datemoisf ,passer = 0, 0, 0, 0,0,0,0
            listTemp, final = [], []
            ########
            for d in range(NumRows):
                cr_date1 = self.all_data.Date[d][:10]
                cr_date2 = datetime.datetime.strptime(cr_date1, '%d/%m/%Y')
                cr_date = cr_date2.strftime("%Y/%m/%d")
                mois = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
                month = cr_date.split("/")
                if int(month[1]) in mois:
                    datemoisf = cr_date
                    if datemoisd == 0:
                        datemoisd = cr_date
                    print(f"debut : {datemoisd}, date de fin :  {datemoisf}")
                    # quand on a un 1000 ou 9999 alors c'est un appelle reussi
                    if self.all_data.Destination[d][-5:-1] == "1000" or self.all_data.Destination[d][
                                                                        -5:-1] == "9999" and \
                            self.all_data.Conversation[d] != "non rÃ©pondu":
                        if self.all_data.Destination[d][
                           :2] == "VM":  # quand on a VM au debut dans la colonne Destinataire alors c'est un message vocal
                            messageVocal += 1
                            # print(self.all_data.Date[d][3:5])
                        else:
                            reponse += 1
                    else:
                        if self.all_data.Destination[d][-5:-1] == "8004" and self.all_data.Conversation[
                            d] == "non rÃ©pondu":
                            # quand on a un 8004 c'est que on a tentÃ© d'appeller
                            listTemp.append(self.all_data.Date[d])
                            if listTemp.count(self.all_data.Date[d]) == 1:
                                final.append(self.all_data.Date[d])

                        elif self.all_data.Destination[d][-5:-1] == "8004" and self.all_data.Conversation[
                            d] != "non rÃ©pondu":
                            reponse += 1
                    pasRepondu = len(final)
                    totalf = reponse + pasRepondu + messageVocal
                    if int(month[1]) == 2:
                        passer = 2
                        actuel = ["", "", "le mois de fevrier"]
                        CallCenter.fevrier["total"] = total
                        CallCenter.fevrier["repondu"] = reponse
                        CallCenter.fevrier["pasrepondu"] = pasRepondu
                        CallCenter.fevrier["messagevocal"] = messageVocal
                        print(f"on a pour le 2 on a  total:{total}; pasrepondu : {CallCenter.fevrier['pasrepondu']}")
                    elif int(month[1]) == 3:
                        passer = int(month[1])
                        actuel = ["", "", "le mois de mars"]
                        total = totalf - CallCenter.fevrier["total"]
                        CallCenter.mars["total"] = total
                        CallCenter.mars["repondu"] = reponse - CallCenter.fevrier["repondu"]
                        CallCenter.mars["pasrepondu"] = pasRepondu - CallCenter.fevrier["pasrepondu"]
                        CallCenter.mars["messagevocal"] = messageVocal - CallCenter.fevrier["messagevocal"]
                        print(f"on a pour le 03 on a  total:{total}; pasrepondu : {CallCenter.mars['pasrepondu']}")

                    elif int(month[1]) == 4:
                        passer = int(month[1])
                        actuel = ["", "", "le mois de avril"]
                        total = totalf - (CallCenter.mars["total"] + CallCenter.fevrier['total'])
                        CallCenter.avril["total"] = total
                        CallCenter.avril["repondu"] = reponse - (
                                    CallCenter.mars["repondu"] + CallCenter.fevrier["repondu"])
                        CallCenter.avril["pasrepondu"] = pasRepondu - (
                                    CallCenter.mars["pasrepondu"] + CallCenter.fevrier["pasrepondu"])
                        CallCenter.avril["messagevocal"] = messageVocal - (
                                    CallCenter.mars["messagevocal"] + CallCenter.fevrier["messagevocal"])
                        print(f"on a pour le 04 on a  total:{total}; pasrepondu : {CallCenter.avril['pasrepondu']}")

                    elif int(month[1]) == 5:
                        passer = int(month[1])
                        actuel = ["", "", "le mois de mai"]
                        total = totalf - (CallCenter.mars["total"] + CallCenter.fevrier['total']+ CallCenter.avril['total'])
                        CallCenter.mai["total"] = total
                        CallCenter.mai["repondu"] = reponse - (
                                    CallCenter.mars["repondu"] + CallCenter.fevrier["repondu"]+ CallCenter.avril['repondu'])
                        CallCenter.mai["pasrepondu"] = pasRepondu - (
                                    CallCenter.mars["pasrepondu"] + CallCenter.fevrier["pasrepondu"]+ CallCenter.avril["pasrepondu"])
                        CallCenter.mai["messagevocal"] = messageVocal - (
                                    CallCenter.mars["messagevocal"] + CallCenter.fevrier["messagevocal"]+ CallCenter.avril["messagevocal"])
                        print(f"on a pour le 05 on a  total:{total}; pasrepondu : {CallCenter.avril['pasrepondu']}")

                    elif int(month[1]) == 6:
                        passer = int(month[1])
                        actuel = ["", "", "le mois de juin"]
                        total = totalf - (CallCenter.mars["total"] + CallCenter.fevrier['total']+ CallCenter.avril['total']+
                          CallCenter.mai['total'])
                        CallCenter.juin["total"] = total
                        CallCenter.juin["repondu"] = reponse - (
                                    CallCenter.mars["repondu"] + CallCenter.fevrier["repondu"]+ CallCenter.avril["repondu"]+C)
                        CallCenter.juin["pasrepondu"] = pasRepondu - (
                                    CallCenter.mars["pasrepondu"] + CallCenter.fevrier["pasrepondu"])
                        CallCenter.juin["messagevocal"] = messageVocal - (
                                    CallCenter.mars["messagevocal"] + CallCenter.fevrier["messagevocal"])
                        print(f"on a pour le 06 on a  total:{total}; pasrepondu : {CallCenter.avril['pasrepondu']}")

                    #                 CallCenter.mars["repondu"] + CallCenter.fevrier["repondu"]+CallCenter.avril["repondu"]
                    #     CallCenter.avril["pasrepondu"] = pasRepondu - (
                    #                 CallCenter.mars["pasrepondu"] + CallCenter.fevrier["pasrepondu"] +CallCenter.avril["pasrepondu"])
                    #     CallCenter.avril["messagevocal"] = messageVocal - (
                    #                 CallCenter.mars["messagevocal"] + CallCenter.fevrier["messagevocal"] + CallCenter.avril["messagevocal"])
                    #     print(f"on a pour le 05 on a  total:{CallCenter.mai['total']}; pasrepondu : {CallCenter.mai['pasrepondu']}")
                    #
                    # elif int(month[1]) == 6:
                    #     passer = int(month[1])
                    #     actuel = ["", "", "le mois de juin"]
                    #     total = total - (CallCenter.mars["total"] + CallCenter.fevrier['total']+ CallCenter.avril["total"]+
                    #                      CallCenter.mai["total"])
                    #     CallCenter.juin["total"] = total
                    #     CallCenter.juin["repondu"] = reponse - (
                    #                 CallCenter.mars["repondu"] + CallCenter.fevrier["repondu"]+CallCenter.avril["repondu"] +
                    #     CallCenter.mai["repondu"])
                    #     CallCenter.juin["pasrepondu"] = pasRepondu - (
                    #                 CallCenter.mars["pasrepondu"] + CallCenter.fevrier["pasrepondu"] +CallCenter.avril["pasrepondu"] +
                    #     CallCenter.mai["pasrepondu"])
                    #     CallCenter.juin["messagevocal"] = messageVocal - (
                    #                 CallCenter.mars["messagevocal"] + CallCenter.fevrier["messagevocal"] + CallCenter.avril["messagevocal"]+
                    #                 CallCenter.mai["messagevocal"])
                    #     print(f"on a pour le 06 on a  total:{total}; pasrepondu : {CallCenter.juin['pasrepondu']}")
                    #
                    # elif int(month[1]) == 7:
                    #     passer = int(month[1])
                    #     actuel = ["", "", "le mois de JUILLEt"]
                    #     total = total - (CallCenter.mars["total"] + CallCenter.fevrier['total']+ CallCenter.avril["total"]+
                    #                      CallCenter.mai["total"]+CallCenter.juin['total'])
                    #     CallCenter.juillet["total"] = total
                    #     CallCenter.juillet["repondu"] = reponse - (
                    #                 CallCenter.mars["repondu"] + CallCenter.fevrier["repondu"]+CallCenter.avril["repondu"] +
                    #     CallCenter.mai["repondu"]+CallCenter.juin["repondu"])
                    #     CallCenter.juillet["pasrepondu"] = pasRepondu - (
                    #                 CallCenter.mars["pasrepondu"] + CallCenter.fevrier["pasrepondu"] +CallCenter.avril["pasrepondu"] +
                    #     CallCenter.mai["pasrepondu"]+CallCenter.juin["pasrepondu"])
                    #     CallCenter.juillet["messagevocal"] = messageVocal - (
                    #                 CallCenter.mars["messagevocal"] + CallCenter.fevrier["messagevocal"] + CallCenter.avril["messagevocal"]+
                    #                 CallCenter.mai["messagevocal"]+CallCenter.juin["messagevocal"])
                    #     print(f"on a pour le 2 on a  total:{total}; pasrepondu : {CallCenter.juillet['pasrepondu']}")
                    #
                    # elif int(month[1]) == 8:
                    #     passer = int(month[1])
                    #     actuel = ["", "", "le mois de Aout"]
                    #     total = total - (CallCenter.mars["total"] + CallCenter.fevrier['total']+ CallCenter.avril["total"]+
                    #                      CallCenter.mai["total"]+CallCenter.juin['total']+CallCenter.juillet['total'])
                    #     CallCenter.aout["total"] = total
                    #     CallCenter.aout["repondu"] = reponse - (
                    #                 CallCenter.mars["repondu"] + CallCenter.fevrier["repondu"]+CallCenter.avril["repondu"] +
                    #     CallCenter.mai["repondu"]+CallCenter.juin["repondu"]+CallCenter.juillet["repondu"])
                    #     CallCenter.aout["pasrepondu"] = pasRepondu - (
                    #                 CallCenter.mars["pasrepondu"] + CallCenter.fevrier["pasrepondu"] +CallCenter.avril["pasrepondu"] +
                    #     CallCenter.mai["pasrepondu"]+CallCenter.juin["pasrepondu"]+CallCenter.juillet["pasrepondu"])
                    #     CallCenter.aout["messagevocal"] = messageVocal - (
                    #                 CallCenter.mars["messagevocal"] + CallCenter.fevrier["messagevocal"] + CallCenter.avril["messagevocal"]+
                    #                 CallCenter.mai["messagevocal"]+CallCenter.juin["messagevocal"]+CallCenter.juillet["messagevocal"])
                    #     print(f"on a pour le 2 on a  total:{total}; pasrepondu : {CallCenter.aout['pasrepondu']}")
                    #
                    # elif int(month[1]) == 9:
                    #     passer = int(month[1])
                    #     actuel = ["", "", "le mois de septembre"]
                    #     total = total - (CallCenter.mars["total"] + CallCenter.fevrier['total']+ CallCenter.avril["total"]+
                    #                      CallCenter.mai["total"]+CallCenter.juin['total']+CallCenter.juillet['total']+CallCenter.aout['total'])
                    #     CallCenter.septembre["total"] = total
                    #     CallCenter.septembre["repondu"] = reponse - (
                    #                 CallCenter.mars["repondu"] + CallCenter.fevrier["repondu"]+CallCenter.avril["repondu"] +
                    #     CallCenter.mai["repondu"]+CallCenter.juin["repondu"]+CallCenter.juillet["repondu"]+CallCenter.aout["repondu"])
                    #     CallCenter.septembre["pasrepondu"] = pasRepondu - (
                    #                 CallCenter.mars["pasrepondu"] + CallCenter.fevrier["pasrepondu"] +CallCenter.avril["pasrepondu"] +
                    #     CallCenter.mai["pasrepondu"]+CallCenter.juin["pasrepondu"]+CallCenter.juillet["pasrepondu"]+CallCenter.aout["pasrepondu"])
                    #     CallCenter.septembre["messagevocal"] = messageVocal - (
                    #                 CallCenter.mars["messagevocal"] + CallCenter.fevrier["messagevocal"] + CallCenter.avril["messagevocal"]+
                    #                 CallCenter.mai["messagevocal"]+CallCenter.juin["messagevocal"]+CallCenter.juillet["messagevocal"]+
                    #     CallCenter.aout["messagevocal"])
                    #     print(f"on a pour le 2 on a  total:{total}; pasrepondu : {CallCenter.septembre['pasrepondu']}")
                    #
                    # elif int(month[1]) == 10:
                    #     passer = int(month[1])
                    #     actuel = ["", "", "le mois de octobre"]
                    #     total = total - (CallCenter.mars["total"] + CallCenter.fevrier['total']+ CallCenter.avril["total"]+
                    #                      CallCenter.mai["total"]+CallCenter.juin['total']+CallCenter.juillet['total']+CallCenter.aout['total']+
                    #                      CallCenter.septembre["total"])
                    #     CallCenter.octobre["total"] = total
                    #     CallCenter.octobre["repondu"] = reponse - (
                    #                 CallCenter.mars["repondu"] + CallCenter.fevrier["repondu"]+CallCenter.avril["repondu"] +
                    #     CallCenter.mai["repondu"]+CallCenter.juin["repondu"]+CallCenter.juillet["repondu"]+CallCenter.aout["repondu"]+
                    #     CallCenter.septembre["repondu"])
                    #     CallCenter.octobre["pasrepondu"] = pasRepondu - (
                    #                 CallCenter.mars["pasrepondu"] + CallCenter.fevrier["pasrepondu"] +CallCenter.avril["pasrepondu"] +
                    #     CallCenter.mai["pasrepondu"]+CallCenter.juin["pasrepondu"]+CallCenter.juillet["pasrepondu"]+CallCenter.aout["pasrepondu"]+
                    #     CallCenter.septembre["pasrepondu"])
                    #     CallCenter.octobre["messagevocal"] = messageVocal - (
                    #                 CallCenter.mars["messagevocal"] + CallCenter.fevrier["messagevocal"] + CallCenter.avril["messagevocal"]+
                    #                 CallCenter.mai["messagevocal"]+CallCenter.juin["messagevocal"]+CallCenter.juillet["messagevocal"]+
                    #     CallCenter.aout["messagevocal"]+CallCenter.septembre["messagevocal"])
                    #     print(f"on a pour le 2 on a  total:{total}; pasrepondu : {CallCenter.octobre['pasrepondu']}")
                    #
                    # elif int(month[1]) == 11:
                    #     passer = int(month[1])
                    #     actuel = ["", "", "le mois de Novembre"]
                    #     total = total - (
                    #                 CallCenter.mars["total"] + CallCenter.fevrier['total'] + CallCenter.avril["total"] +
                    #                 CallCenter.mai["total"] + CallCenter.juin['total'] + CallCenter.juillet['total'] +
                    #                 CallCenter.aout['total'] +
                    #                 CallCenter.septembre["total"])
                    #     CallCenter.novembre["total"] = total
                    #     CallCenter.novembre["repondu"] = reponse - (
                    #             CallCenter.mars["repondu"] + CallCenter.fevrier["repondu"] + CallCenter.avril[
                    #         "repondu"] +
                    #             CallCenter.mai["repondu"] + CallCenter.juin["repondu"] + CallCenter.juillet["repondu"] +
                    #             CallCenter.aout["repondu"] +
                    #             CallCenter.septembre["repondu"]+CallCenter.octobre["repondu"])
                    #     CallCenter.novembre["pasrepondu"] = pasRepondu - (
                    #             CallCenter.mars["pasrepondu"] + CallCenter.fevrier["pasrepondu"] + CallCenter.avril[
                    #         "pasrepondu"] +
                    #             CallCenter.mai["pasrepondu"] + CallCenter.juin["pasrepondu"] + CallCenter.juillet[
                    #                 "pasrepondu"] + CallCenter.aout["pasrepondu"] +
                    #             CallCenter.septembre["pasrepondu"]+CallCenter.octobre["pasrepondu"])
                    #     CallCenter.octobre["messagevocal"] = messageVocal - (
                    #             CallCenter.mars["messagevocal"] + CallCenter.fevrier["messagevocal"] + CallCenter.avril[
                    #         "messagevocal"] +
                    #             CallCenter.mai["messagevocal"] + CallCenter.juin["messagevocal"] + CallCenter.juillet[
                    #                 "messagevocal"]+CallCenter.aout["messagevocal"] + CallCenter.septembre["messagevocal"]+
                    #     CallCenter.octobre["messagevocal"])
                    #     print(f"on a pour le 2 on a  total:{total}; pasrepondu : {CallCenter.novembre['pasrepondu']}")
                    #
                    # elif int(month[1]) == 12:
                    #     passer = int(month[1])
                    #     actuel = ["", "", "le mois de Decembre"]
                    #     total = total - (
                    #                 CallCenter.mars["total"] + CallCenter.fevrier['total'] + CallCenter.avril["total"] +
                    #                 CallCenter.mai["total"] + CallCenter.juin['total'] + CallCenter.juillet['total'] +
                    #                 CallCenter.aout['total'] +
                    #                 CallCenter.septembre["total"])
                    #     CallCenter.novembre["total"] = total
                    #     CallCenter.novembre["repondu"] = reponse - (
                    #             CallCenter.mars["repondu"] + CallCenter.fevrier["repondu"] + CallCenter.avril[
                    #         "repondu"] +
                    #             CallCenter.mai["repondu"] + CallCenter.juin["repondu"] + CallCenter.juillet["repondu"] +
                    #             CallCenter.aout["repondu"] +
                    #             CallCenter.septembre["repondu"]+CallCenter.octobre["repondu"]+CallCenter.novembre["repondu"])
                    #     CallCenter.novembre["pasrepondu"] = pasRepondu - (
                    #             CallCenter.mars["pasrepondu"] + CallCenter.fevrier["pasrepondu"] + CallCenter.avril[
                    #         "pasrepondu"] +
                    #             CallCenter.mai["pasrepondu"] + CallCenter.juin["pasrepondu"] + CallCenter.juillet[
                    #                 "pasrepondu"] + CallCenter.aout["pasrepondu"] +
                    #             CallCenter.septembre["pasrepondu"]+CallCenter.octobre["pasrepondu"]+
                    #             CallCenter.novembre["pasrepondu"])
                    #     CallCenter.octobre["messagevocal"] = messageVocal - (
                    #             CallCenter.mars["messagevocal"] + CallCenter.fevrier["messagevocal"] + CallCenter.avril[
                    #         "messagevocal"] +
                    #             CallCenter.mai["messagevocal"] + CallCenter.juin["messagevocal"] + CallCenter.juillet[
                    #                 "messagevocal"]+CallCenter.aout["messagevocal"] + CallCenter.septembre["messagevocal"]+
                    #     CallCenter.octobre["messagevocal"]+CallCenter.novembre["messagevocal"])
                    #     print(f"on a pour le 12 on a  total:{total}; pasrepondu : {CallCenter.decembre['pasrepondu']}")


                print("total egale a : ",totalf)
                CallCenter.ListTotal = [totalf, reponse, pasRepondu, messageVocal, self.all_data.Date[0][:10],
                                        self.all_data.Date[len(self.all_data) - 1][:10]]
                self.LabelAppelTotal.setText(str(totalf))
                self.LabelAppelRepondu.setText(str(reponse))
                self.LabelAppelRefuse.setText(str(pasRepondu))
                self.LabelMessageVocal.setText(str(messageVocal))
            CallCenter.Listexport.append(CallCenter.ListTotal)
            fevrier = [CallCenter.fevrier["total"],CallCenter.fevrier["repondu"],
                       CallCenter.fevrier["pasrepondu"],CallCenter.fevrier["messagevocal"]]
            mars = [CallCenter.mars["total"],CallCenter.mars["repondu"],CallCenter.mars["pasrepondu"],
                    CallCenter.mars["messagevocal"]]
            avril = [CallCenter.avril["total"],CallCenter.avril["repondu"],CallCenter.avril["pasrepondu"],
            CallCenter.avril["messagevocal"]]
            mai = [CallCenter.mai["total"],CallCenter.mai["repondu"],CallCenter.mai["pasrepondu"],
            CallCenter.mai["messagevocal"]]
            juin= [CallCenter.juin["total"],CallCenter.juin["repondu"],CallCenter.juin["pasrepondu"],
            CallCenter.juin["messagevocal"]]
            # juillet = [CallCenter.juillet["total"], CallCenter.juillet["repondu"], CallCenter.juillet["pasrepondu"],
            # CallCenter.juillet["messagevocal"]]
            # aout = [CallCenter.aout["total"], CallCenter.aout["repondu"], CallCenter.aout["pasrepondu"],
            # CallCenter.aout["messagevocal"]]
            # septembre = [CallCenter.septembre["total"], CallCenter.septembre["repondu"], CallCenter.septembre["pasrepondu"],
            # CallCenter.septembre["messagevocal"]]
            # octobre = [CallCenter.octobre["total"], CallCenter.octobre["repondu"], CallCenter.octobre["pasrepondu"],
            # CallCenter.octobre["messagevocal"]]
            # novembre = [CallCenter.novembre["total"], CallCenter.novembre["repondu"], CallCenter.novembre["pasrepondu"],
            # CallCenter.novembre["messagevocal"]]
            # decembre = [CallCenter.decembre["total"], CallCenter.decembre["repondu"], CallCenter.decembre["pasrepondu"],
            # CallCenter.decembre["messagevocal"]]
            # fevrier=[str(CallCenter.fevrier["total"])]
            CallCenter.Listexport.append([CallCenter.fevrier["nom"]])
            CallCenter.Listexport.append(fevrier)
            CallCenter.Listexport.append([CallCenter.mars["nom"]])
            CallCenter.Listexport.append(mars)
            CallCenter.Listexport.append([CallCenter.avril["nom"]])
            CallCenter.Listexport.append(avril)
            CallCenter.Listexport.append([CallCenter.mai["nom"]])
            CallCenter.Listexport.append(mai)
            CallCenter.Listexport.append([CallCenter.juin["nom"]])
            CallCenter.Listexport.append(juin)
            # CallCenter.Listexport.append([CallCenter.juillet["nom"]])
            # CallCenter.Listexport.append(juillet)
            # CallCenter.Listexport.append([CallCenter.aout["nom"]])
            # CallCenter.Listexport.append(aout)
            # CallCenter.Listexport.append([CallCenter.septembre["nom"]])
            # CallCenter.Listexport.append(septembre)
            # CallCenter.Listexport.append([CallCenter.octobre["nom"]])
            # CallCenter.Listexport.append(octobre)
            # CallCenter.Listexport.append([CallCenter.novembre["nom"]])
            # CallCenter.Listexport.append(novembre)
            # CallCenter.Listexport.append([CallCenter.decembre["nom"]])
            # CallCenter.Listexport.append(decembre)
            print(CallCenter.Listexport)




        except:
            pass

    def date(self):
        try:

            dated = self.EditDate.date()
            b = dated.toPyDate()
            CallCenter.dateDebut = b.strftime('%d-%m-%Y')
            datedf = b.strftime('%m/%d/%Y')
            datef = self.EditDate_2.date()
            b2 = datef.toPyDate()
            CallCenter.dateFin = b2.strftime('%d-%m-%Y')
            dateff = b2.strftime('%m/%d/%Y')
            a = pd.date_range(start=datedf, end=dateff)
            messageVocal, pasRepondu, reponse, total,datemoisd,datemoisf = 0, 0, 0, 0,0,0
            listTemp, final,mois = [], [],[]
            moi=0
            passer=0
            for d in range(CallCenter.Num):
                cr_date1 = self.all_data.Date[d ][:10]
                cr_date2 = datetime.datetime.strptime(cr_date1, '%d/%m/%Y')
                cr_date = cr_date2.strftime("%Y/%m/%d")
                if cr_date in a:
                    mois = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
                    month = cr_date.split("/")
                    if int(month[1]) in mois:
                        datemoisf = cr_date
                        if datemoisd == 0:
                            datemoisd = cr_date
                        print(f"debut : {datemoisd}, date de fin :  {datemoisf}")

                        if self.all_data.Destination[d][-5:-1] == "1000" or self.all_data.Destination[d][
                                                                            -5:-1] == "9999" and \
                                self.all_data.Conversation[d] != "non rÃ©pondu":
                            if self.all_data.Destination[d][
                               :2] == "VM":  # quand on a VM au debut dans la colonne Destinataire alors c'est un message vocal
                                messageVocal += 1
                                # print(self.all_data.Date[d][3:5])
                            else:
                                reponse += 1
                        else:
                            if self.all_data.Destination[d][-5:-1] == "8004" and self.all_data.Conversation[
                                d] == "non rÃ©pondu":
                                # quand on a un 8004 c'est que on a tentÃ© d'appeller
                                listTemp.append(self.all_data.Date[d])
                                if listTemp.count(self.all_data.Date[d]) == 1:
                                    final.append(self.all_data.Date[d])

                            elif self.all_data.Destination[d][-5:-1] == "8004" and self.all_data.Conversation[
                                d] != "non rÃ©pondu":
                                reponse += 1
                        total = reponse + pasRepondu + messageVocal

                        if int(month[1])==2:
                            passer=2
                            actuel = ["", "", "le mois de fevrier"]
                            CallCenter.fevrier["total"]=total
                            CallCenter.fevrier["repondu"]=reponse
                            CallCenter.fevrier["pasrepondu"]=pasRepondu
                            CallCenter.fevrier["messagevocal"]=messageVocal
                            print(f"on a pour le 2 on a  total:{total}; pasrepondu : {CallCenter.fevrier['pasrepondu']}")
                        elif int(month[1])==3 :
                            passer = int(month[1])
                            actuel = ["", "", "le mois de mars"]
                            total = total - CallCenter.fevrier["total"]
                            CallCenter.mars["total"] = total
                            CallCenter.mars["repondu"] = reponse - CallCenter.fevrier["repondu"]
                            CallCenter.mars["pasrepondu"] = pasRepondu - CallCenter.fevrier["pasrepondu"]
                            CallCenter.mars["messagevocal"] = messageVocal - CallCenter.fevrier["messagevocal"]
                            print(f"on a pour le 2 on a  total:{total}; pasrepondu : {CallCenter.mars['pasrepondu']}")

                        elif int(month[1])==4 :
                            passer = int(month[1])
                            actuel = ["", "", "le mois de avril"]
                            total = total - (CallCenter.mars["total"]+CallCenter.fevrier['total'])
                            CallCenter.avril["total"] = total
                            CallCenter.avril["repondu"] = reponse - (CallCenter.mars["repondu"]+CallCenter.fevrier["repondu"])
                            CallCenter.avril["pasrepondu"] = pasRepondu - (CallCenter.mars["pasrepondu"]+ CallCenter.fevrier["pasrepondu"])
                            CallCenter.avril["messagevocal"] = messageVocal - (CallCenter.mars["messagevocal"]+ CallCenter.fevrier["messagevocal"])
                            print(f"on a pour le 2 on a  total:{total}; pasrepondu : {CallCenter.mars['pasrepondu']}")

                        # elif int(month[1])==3 and passer!=2:
                        #     actuel = ["", "", "le mois de Mars"]
                        #     print(f"on a pour le 3 mois :", total)
                        #     print(":",CallCenter.fevrier["repondu"])

                    pasRepondu = len(final)
                    total = reponse + pasRepondu + messageVocal
                    self.LabelAppelTotal.setText(str(total))
                    self.LabelAppelRepondu.setText(str(reponse))
                    self.LabelAppelRefuse.setText(str(pasRepondu))
                    self.LabelMessageVocal.setText(str(messageVocal))

            fevrier = [str(CallCenter.fevrier["total"]), str(CallCenter.fevrier["repondu"]), str(CallCenter.fevrier["pasrepondu"]),
                    str(CallCenter.fevrier["messagevocal"])]
            mars = [str(CallCenter.mars["total"]),str(CallCenter.mars["repondu"]),str(CallCenter.mars["pasrepondu"]),
                    str(CallCenter.mars["messagevocal"])]
            avril = [str(CallCenter.avril["total"]), str(CallCenter.avril["repondu"]), str(CallCenter.avril["pasrepondu"]),
                    str(CallCenter.avril["messagevocal"])]
            # fevrier=[str(CallCenter.fevrier["total"])]
            CallCenter.Listexport.append([CallCenter.fevrier["nom"]])
            CallCenter.Listexport.append(fevrier)
            CallCenter.Listexport.append([CallCenter.mars["nom"]])
            CallCenter.Listexport.append(mars)
            CallCenter.Listexport.append([CallCenter.avril["nom"]])
            CallCenter.Listexport.append(avril)
            print(CallCenter.Listexport)


#fin de moi de marse


#moi de janvier



            # impair_month=[1,3,5,7,9,11]
                    # if month[2] in impair_month:
                    #     moi = {1:"Janvier",3:"Mars",5:"Mai",7:"Juin",9:"Septembre",11:"Novembre"}
                    #     print()
                    #     print(f"le moi est : {month[1]} et jour {month[2]}")

                    # quand on a un 1000 ou 9999 alors c'est un appelle reussi

        except:
            pass

    def save(self):
        try:
            # date de debut du fichier
            debut = self.all_data.Date[0][:10]
            cr_dated1 = datetime.datetime.strptime(debut, '%d/%m/%Y')
            cr_dated = cr_dated1.strftime("%d-%m-%Y")
            # fin du fichier
            fin = self.all_data.Date[CallCenter.Num - 1][:10]
            cr_datedf1 = datetime.datetime.strptime(fin, '%d/%m/%Y')
            cr_datedf = cr_datedf1.strftime("%d-%m-%Y")
            # Nommage du fichier
            if CallCenter.dateFin == 0:
                file = str(QFileDialog.getExistingDirectory(None, "Selectioner Dossier"))
                with xlsxwriter.Workbook(f'{file}/Total.xlsx') as workbook:
                    worksheet = workbook.add_worksheet()
                    for row_num, data in enumerate(CallCenter.Listexport):
                        worksheet.write_row(row_num, 0, data)
            else:
                CallCenter.Listexport.pop(1)
                print(CallCenter.Listexport)
                file = str(QFileDialog.getExistingDirectory(None, "Selectioner Dossier"))
                with xlsxwriter.Workbook(f'{file}/demo_{CallCenter.dateDebut}_{CallCenter.dateFin}.xlsx') as workbook:
                    worksheet = workbook.add_worksheet()
                    for row_num, data in enumerate(CallCenter.Listexport):
                        worksheet.write_row(row_num, 0, data,)




            # if len(CallCenter.Listexport) == 1:
            #     # date de debut du fichier
            #     debut = self.all_data.Date[0][:10]
            #     cr_dated1 = datetime.datetime.strptime(debut, '%d/%m/%Y')
            #     cr_dated = cr_dated1.strftime("%d-%m-%Y")
            #     # fin du fichier
            #     fin = self.all_data.Date[CallCenter.Num - 1][:10]
            #     cr_datedf1 = datetime.datetime.strptime(fin, '%d/%m/%Y')
            #     cr_datedf = cr_datedf1.strftime("%d-%m-%Y")
            #     # Nommage du fichier
            #     file = str(QFileDialog.getExistingDirectory(None, "Selectioner Dossier"))
            #     CallCenter.Listexport.append(CallCenter.ListTotal)
            #     print(CallCenter.Listexport)
            #     with xlsxwriter.Workbook(f'{file}/Total.xlsx') as workbook:
            #         worksheet = workbook.add_worksheet()
            #         for row_num, data in enumerate(CallCenter.Listexport):
            #             worksheet.write_row(row_num, 0, data)
            #
            #
            # else:
            #     file = str(QFileDialog.getExistingDirectory(None, "Selectioner Dossier"))
            #     with xlsxwriter.Workbook(f'{file}/demo_{CallCenter.dateDebut}_{CallCenter.dateFin}.xlsx') as workbook:
            #         worksheet = workbook.add_worksheet()
            #         for row_num, data in enumerate(CallCenter.Listexport):
            #             worksheet.write_row(row_num, 0, data)


        except:
            pass


#####


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    # app.setWindowIcon(QtGui.QIcon('process.ico'))
    #gestion de l'icon de la fenetre
    app.setWindowIcon(QtGui.QIcon(os.path.join(basedir, 'process.ico')))
    #fin de la gestion de l'icon de la fenetre
    MainWindow = QtWidgets.QMainWindow()
    ui = CallCenter()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
